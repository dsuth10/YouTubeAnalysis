{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Express.js Server",
        "description": "Initialize the Node.js project with Express.js and necessary middleware.",
        "details": "1.  Create a new directory for the project.\n2.  Run `npm init -y` to create a `package.json` file.\n3.  Install Express.js, cors, dotenv, and multer: `npm install express cors dotenv multer`.\n4.  Create `server.js` with basic Express setup:\n\n```javascript\nconst express = require('express');\nconst cors = require('cors');\nconst dotenv = require('dotenv');\nconst multer = require('multer');\n\ndotenv.config();\n\nconst app = express();\nconst port = process.env.PORT || 3000;\n\napp.use(cors());\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Multer configuration (example)\nconst storage = multer.memoryStorage();\nconst upload = multer({ storage: storage });\n\napp.get('/', (req, res) => {\n  res.send('YouTube Video Research App Backend');\n});\n\napp.listen(port, () => {\n  console.log(`Server listening on port ${port}`);\n});\n```",
        "testStrategy": "Start the server using `node server.js` and verify that it runs without errors. Access the root route in a browser to confirm the server is running.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Implement YouTube API Integration",
        "description": "Implement YouTube Data API v3 integration to fetch video metadata.",
        "details": "1.  Install `axios`: `npm install axios`.\n2.  Create a function to fetch video metadata using the YouTube Data API.\n\n```javascript\nconst axios = require('axios');\n\nasync function getVideoMetadata(videoId) {\n  const apiKey = process.env.YOUTUBE_API_KEY;\n  const url = `https://www.googleapis.com/youtube/v3/videos?id=${videoId}&key=${apiKey}&part=snippet,statistics,contentDetails`;\n  try {\n    const response = await axios.get(url);\n    if (response.data.items.length > 0) {\n      const item = response.data.items[0];\n      return {\n        id: item.id,\n        title: item.snippet.title,\n        channel: item.snippet.channelTitle,\n        publishedAt: item.snippet.publishedAt,\n        viewCount: item.statistics.viewCount,\n        likeCount: item.statistics.likeCount,\n        description: item.snippet.description,\n        thumbnail: item.snippet.thumbnails.high.url,\n        duration: item.contentDetails.duration\n      };\n    } else {\n      throw new Error('Video not found');\n    }\n  } catch (error) {\n    console.error('Error fetching video metadata:', error);\n    throw error;\n  }\n}\n```\n3.  Create an API endpoint in `server.js` to use this function.\n4.  Store the YouTube API key in `.env` file.",
        "testStrategy": "Call the API endpoint with a valid YouTube video ID and verify that the correct metadata is returned. Test with invalid IDs to ensure proper error handling.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Develop Basic Frontend Interface",
        "description": "Create a basic HTML form for users to input YouTube URLs and display the fetched video metadata.",
        "details": "1.  Create `public/index.html` with a form for YouTube URL input and a section to display results.\n2.  Add basic CSS in `public/styles.css` for styling.\n3.  Create `public/script.js` to handle form submission and display metadata.\n4.  Serve static files from the `public` directory in `server.js`.\n\n```javascript\napp.use(express.static('public'));\n```",
        "testStrategy": "Enter a YouTube URL in the form and verify that the metadata is displayed correctly on the page. Ensure the page is responsive and displays correctly on different screen sizes.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Implement OpenRouter API Integration",
        "description": "Integrate OpenRouter API for AI-powered content analysis.",
        "details": "1.  Install `axios`: `npm install axios` (if not already installed).\n2.  Create a function to send prompts to the OpenRouter API and retrieve AI analysis.\n\n```javascript\nconst axios = require('axios');\n\nasync function getAIAnalysis(prompt, model = 'openai/gpt-3.5-turbo', tokenLimit = 6000) {\n  const apiKey = process.env.OPENROUTER_API_KEY;\n  const url = 'https://openrouter.ai/api/v1/chat/completions';\n  const headers = {\n    'Authorization': `Bearer ${apiKey}`,\n    'Content-Type': 'application/json'\n  };\n  const data = {\n    model: model,\n    messages: [{ role: 'user', content: prompt }],\n    max_tokens: tokenLimit\n  };\n  try {\n    const response = await axios.post(url, data, { headers: headers });\n    return response.data.choices[0].message.content;\n  } catch (error) {\n    console.error('Error getting AI analysis:', error);\n    throw error;\n  }\n}\n```\n3.  Store the OpenRouter API key in `.env` file.",
        "testStrategy": "Send a test prompt to the OpenRouter API and verify that a valid AI analysis is returned. Test with different models and token limits to ensure the integration is working correctly.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Implement Transcript Extraction",
        "description": "Implement primary method for extracting video transcripts using `youtube-transcript`.",
        "details": "1.  Install `youtube-transcript`: `npm install youtube-transcript`.\n2.  Create a function to extract the transcript from a YouTube video.\n\n```javascript\nconst { YoutubeTranscript } = require('youtube-transcript');\n\nasync function getTranscript(videoId) {\n  try {\n    const transcript = await YoutubeTranscript.fetchTranscript(videoId);\n    return transcript.map(item => item.text).join(' ');\n  } catch (error) {\n    console.error('Error fetching transcript:', error);\n    throw error;\n  }\n}\n```",
        "testStrategy": "Call the transcript extraction function with a valid YouTube video ID and verify that the transcript is returned correctly. Test with videos that have captions enabled.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Develop Analysis Engine",
        "description": "Process AI prompts and handle responses to generate video analysis.",
        "details": "1.  Create a function to combine video metadata and transcript into a prompt for AI analysis.\n2.  Call the `getVideoMetadata`, `getTranscript`, and `getAIAnalysis` functions.\n3.  Handle the AI response and prepare it for markdown generation.\n\n```javascript\nasync function analyzeVideo(videoId, model = 'openai/gpt-3.5-turbo', tokenLimit = 6000, customPrompt = null) {\n  try {\n    const videoInfo = await getVideoMetadata(videoId);\n    const transcript = await getTranscript(videoId);\n\n    let prompt = customPrompt || `Summarize the following video transcript: ${transcript}`;\n\n    const analysis = await getAIAnalysis(prompt, model, tokenLimit);\n\n    return {\n      videoInfo: videoInfo,\n      analysis: analysis,\n      generatedTitle: `Analysis of ${videoInfo.title}`,\n      hasTranscript: true,\n      modelUsed: model,\n      promptUsed: prompt,\n      tokenLimit: tokenLimit\n    };\n  } catch (error) {\n    console.error('Error analyzing video:', error);\n    throw error;\n  }\n}\n```",
        "testStrategy": "Call the analysis function with a valid YouTube video ID and verify that the AI analysis is returned correctly. Test with different models, token limits, and prompts.",
        "priority": "medium",
        "dependencies": [
          2,
          4,
          5
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Implement Markdown Generation",
        "description": "Format the analysis results into a structured markdown report.",
        "details": "1.  Create a function to generate a markdown report from the analysis results.\n2.  Include video metadata, transcript, and AI analysis in the report.\n\n```javascript\nfunction generateMarkdownReport(analysisResult) {\n  const {\n    videoInfo,\n    analysis,\n    generatedTitle,\n    hasTranscript,\n    modelUsed,\n    promptUsed,\n    tokenLimit\n  } = analysisResult;\n\n  let markdown = `# ${generatedTitle}\\n\\n## Video Information\\n\\n- Title: ${videoInfo.title}\\n- Channel: ${videoInfo.channel}\\n- Published At: ${videoInfo.publishedAt}\\n- Views: ${videoInfo.viewCount}\\n- Likes: ${videoInfo.likeCount}\\n\\n## Analysis\\n\\n${analysis}\\n\\n## Transcript Available\\n\\n${hasTranscript ? 'Yes' : 'No'}\\n\\n## Model Used\\n\\n${modelUsed}\\n\\n## Prompt Used\\n\\n${promptUsed}\\n\\n## Token Limit\\n\\n${tokenLimit}\\n`;\n\n  return markdown;\n}\n```",
        "testStrategy": "Call the markdown generation function with valid analysis results and verify that the markdown report is generated correctly. Ensure the report includes all the necessary information.",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Implement Download System",
        "description": "Implement file generation and download endpoints for the analysis reports.",
        "details": "1.  Create an API endpoint to trigger the analysis and generate the markdown report.\n2.  Set the appropriate headers for file download.\n\n```javascript\nconst fs = require('fs');\nconst path = require('path');\n\napp.get('/analyze/:videoId', async (req, res) => {\n  const videoId = req.params.videoId;\n  try {\n    const analysisResult = await analyzeVideo(videoId);\n    const markdownReport = generateMarkdownReport(analysisResult);\n    const filename = `analysis_${videoId}.md`;\n    const filepath = path.join(__dirname, 'temp', filename);\n\n    // Ensure the 'temp' directory exists\n    if (!fs.existsSync(path.join(__dirname, 'temp'))) {\n      fs.mkdirSync(path.join(__dirname, 'temp'));\n    }\n\n    fs.writeFileSync(filepath, markdownReport);\n\n    res.download(filepath, filename, (err) => {\n      if (err) {\n        console.error('Error downloading file:', err);\n        res.status(500).send('Error downloading file');\n      }\n      // Delete the file after download\n      fs.unlinkSync(filepath);\n    });\n  } catch (error) {\n    console.error('Error analyzing video:', error);\n    res.status(500).send('Error analyzing video');\n  }\n});\n```",
        "testStrategy": "Call the API endpoint with a valid YouTube video ID and verify that the markdown report is downloaded correctly. Ensure the file contains the correct information and is properly formatted.",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Implement Error Handling",
        "description": "Implement comprehensive error management and user feedback.",
        "details": "1.  Implement error handling for YouTube API calls, transcript extraction, and AI analysis.\n2.  Provide clear error messages to the user in the frontend.\n3.  Log errors for debugging purposes.\n\n```javascript\ntry {\n  // Code that might throw an error\n} catch (error) {\n  console.error('An error occurred:', error);\n  // Send an error response to the client\n  res.status(500).json({ error: 'An error occurred' });\n}\n```",
        "testStrategy": "Simulate errors in the YouTube API, transcript extraction, and AI analysis and verify that the error messages are displayed correctly in the frontend. Ensure the errors are logged for debugging purposes.",
        "priority": "medium",
        "dependencies": [
          2,
          5
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Enhance UI Design",
        "description": "Enhance the UI with a modern design and responsive layout.",
        "details": "1.  Use modern CSS techniques to create a clean and intuitive interface.\n2.  Implement a responsive layout that adapts to different screen sizes.\n3.  Add animations and transitions to improve the user experience.\n4.  Ensure the UI is accessible to users with disabilities.\n\n```css\n/* Example of responsive design */\n@media (max-width: 768px) {\n  .container {\n    width: 100%;\n    padding: 10px;\n  }\n}\n```",
        "testStrategy": "Test the UI on different devices and screen sizes to ensure it is responsive and displays correctly. Verify that the UI is accessible to users with disabilities.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Implement Multiple Transcript Methods",
        "description": "Implement fallback systems for robust transcript extraction using `youtube-transcript-api` and `youtube-captions-scraper`.",
        "details": "1.  Install `youtube-transcript-api` and `youtube-captions-scraper`: `npm install youtube-transcript-api youtube-captions-scraper`.\n2.  Implement fallback logic to try different transcript extraction methods if the primary method fails.\n\n```javascript\nconst { YoutubeTranscript } = require('youtube-transcript');\nconst { getSubtitles } = require('youtube-captions-scraper');\n\nasync function getTranscriptWithFallback(videoId) {\n  try {\n    // Try youtube-transcript\n    const transcript = await YoutubeTranscript.fetchTranscript(videoId);\n    return transcript.map(item => item.text).join(' ');\n  } catch (error) {\n    console.error('youtube-transcript failed:', error);\n    try {\n      // Try youtube-captions-scraper\n      const captions = await getSubtitles({ videoID: videoId, lang: 'en' });\n      return captions.map(item => item.text).join(' ');\n    } catch (error) {\n      console.error('youtube-captions-scraper failed:', error);\n      return 'No transcript available';\n    }\n  }\n}\n```",
        "testStrategy": "Test the transcript extraction with videos that have captions enabled and disabled. Verify that the fallback methods are working correctly when the primary method fails.",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Implement Custom Prompts System",
        "description": "Implement a system for loading and using custom analysis prompts from markdown files.",
        "details": "1.  Create a directory to store custom prompt templates (e.g., `prompts/`).\n2.  Implement an API endpoint to load prompt templates from the directory.\n3.  Implement logic to replace placeholders in the prompt templates with video metadata.\n\n```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nasync function loadPromptTemplates() {\n  const promptsDir = path.join(__dirname, 'prompts');\n  const promptFiles = fs.readdirSync(promptsDir).filter(file => file.endsWith('.md'));\n  const prompts = {};\n  for (const file of promptFiles) {\n    const promptName = path.basename(file, '.md');\n    const promptPath = path.join(promptsDir, file);\n    const promptContent = fs.readFileSync(promptPath, 'utf8');\n    prompts[promptName] = promptContent;\n  }\n  return prompts;\n}\n```",
        "testStrategy": "Create custom prompt templates and verify that they are loaded correctly. Test the placeholder replacement logic with different video metadata.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Implement Model Management",
        "description": "Implement search, favorites, and model information display for AI models.",
        "details": "1.  Create a UI element for searching AI models.\n2.  Implement logic to filter the AI models based on the search query.\n3.  Implement a favorites system to allow users to save their favorite AI models.\n4.  Display information about each AI model, such as its name, description, and pricing.",
        "testStrategy": "Search for AI models and verify that the search results are displayed correctly. Save favorite AI models and verify that they are saved correctly. Display information about each AI model and verify that the information is accurate.",
        "priority": "low",
        "dependencies": [
          4
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Implement Notion Integration",
        "description": "Implement Notion API integration for database connection and content creation.",
        "details": "1.  Install `@notionhq/client`: `npm install @notionhq/client`.\n2.  Implement logic to connect to the Notion API using an integration token.\n3.  Implement logic to create database entries and child pages in Notion.\n4.  Implement logic to map video metadata to database properties.\n\n```javascript\nconst { Client } = require('@notionhq/client');\n\nconst notion = new Client({ auth: process.env.NOTION_API_KEY });\n\nasync function createNotionPage(databaseId, analysisResult) {\n  const {\n    videoInfo,\n    analysis,\n    generatedTitle\n  } = analysisResult;\n\n  try {\n    const response = await notion.pages.create({\n      parent: { database_id: databaseId },\n      properties: {\n        Title: {\n          title: [\n            {\n              text: { content: videoInfo.title }\n            }\n          ]\n        },\n        URL: {\n          url: `https://www.youtube.com/watch?v=${videoInfo.id}`\n        },\n        Channel: {\n          rich_text: [\n            {\n              text: { content: videoInfo.channel }\n            }\n          ]\n        },\n        'Published Date': {\n          date: { start: videoInfo.publishedAt }\n        },\n        Views: {\n          number: parseInt(videoInfo.viewCount)\n        },\n        Likes: {\n          number: parseInt(videoInfo.likeCount)\n        }\n      },\n      children: [\n        {\n          object: 'block',\n          type: 'heading_1',\n          heading_1: {\n            rich_text: [\n              {\n                type: 'text',\n                text: { content: 'Analysis' }\n              }\n            ]\n          }\n        },\n        {\n          object: 'block',\n          type: 'paragraph',\n          paragraph: {\n            rich_text: [\n              {\n                type: 'text',\n                text: { content: analysis }\n              }\n            ]\n          }\n        }\n      ]\n    });\n    console.log(response);\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n}\n```",
        "testStrategy": "Connect to the Notion API and create database entries and child pages. Verify that the video metadata is mapped to the database properties correctly. Ensure the content is formatted correctly in Notion.",
        "priority": "low",
        "dependencies": [
          1,
          7
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Implement Advanced Export Options",
        "description": "Implement multiple download formats and Notion saving options.",
        "details": "1.  Implement options to download the analysis report in different formats, such as plain text and JSON.\n2.  Implement an option to save the analysis report to Notion.\n\n```javascript\n// Example of saving to Notion\napp.post('/save-to-notion/:videoId', async (req, res) => {\n  const videoId = req.params.videoId;\n  const databaseId = req.body.databaseId;\n  try {\n    const analysisResult = await analyzeVideo(videoId);\n    await createNotionPage(databaseId, analysisResult);\n    res.send('Saved to Notion');\n  } catch (error) {\n    console.error('Error saving to Notion:', error);\n    res.status(500).send('Error saving to Notion');\n  }\n});\n```",
        "testStrategy": "Download the analysis report in different formats and verify that the content is formatted correctly. Save the analysis report to Notion and verify that the content is saved correctly.",
        "priority": "low",
        "dependencies": [
          7
        ],
        "status": "done",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-03T02:25:28.517Z",
      "updated": "2025-08-03T06:01:52.804Z",
      "description": "Tasks for master context"
    }
  }
}